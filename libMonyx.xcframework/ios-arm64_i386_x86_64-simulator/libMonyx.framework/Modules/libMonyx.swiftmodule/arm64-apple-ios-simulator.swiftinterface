// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name libMonyx
import CommonCrypto
import Foundation
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
@_exported import libMonyx
final public class MachineFilter : Swift.CustomDebugStringConvertible {
  final public let value: Swift.String?
  final public let latitude: Swift.Double?
  final public let longitude: Swift.Double?
  final public let country: Swift.String?
  final public let radius: Swift.Int?
  final public let operatorId: Swift.Int64?
  final public let hwSerial: Swift.String?
  final public let limit: Swift.Int?
  final public var debugDescription: Swift.String {
    get
  }
  public init(value: Swift.String? = nil, latitude: Swift.Double? = nil, longitude: Swift.Double? = nil, country: Swift.String? = nil, radius: Swift.Int? = nil, operatorId: Swift.Int64? = nil, hwSerial: Swift.String? = nil, limit: Swift.Int? = 50)
  @objc deinit
}
@_inheritsConvenienceInitializers public class TDSGetCardErrorResponse : libMonyx.TDSGetCardBaseResponse {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class Campaign : Swift.CustomDebugStringConvertible {
  final public let id: Swift.Int64
  final public let name: Swift.String
  final public let title: Swift.String
  final public let description: Swift.String
  final public let punched: Swift.Int
  final public let totalPunches: Swift.Int
  final public let created: Foundation.Date?
  final public let updated: Foundation.Date?
  final public let expiration: Foundation.Date?
  final public let imageUrl: Swift.String?
  final public let punchCardId: Swift.Int
  final public let lookAndFeel: libMonyx.LookAndFeel?
  final public var debugDescription: Swift.String {
    get
  }
  public init(id: Swift.Int64, name: Swift.String, title: Swift.String, description: Swift.String, punched: Swift.Int, totalPunches: Swift.Int, created: Foundation.Date?, updated: Foundation.Date?, expiration: Foundation.Date?, imageUrl: Swift.String?, punchCardId: Swift.Int, lookAndFeel: libMonyx.LookAndFeel?)
  @objc deinit
}
public struct TDSCardHolder : Swift.Encodable {
  public init(name: Swift.String, email: Swift.String, streetNumber: Swift.Int? = nil, streetName: Swift.String? = nil, city: Swift.String? = nil, territory: Swift.String? = nil, country: Swift.String? = nil, postal: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers public class TDSGetCardLocatorResponse : libMonyx.TDSGetCardBaseResponse {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers public class TDSAddCardChallengeResponse : libMonyx.TDSAddCardBaseResponse {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class Card : Swift.CustomDebugStringConvertible {
  final public let pan: Swift.String
  final public let month: Swift.String
  final public let year: Swift.String
  final public let cvv: Swift.String
  final public let email: Swift.String
  final public let cardHolderName: Swift.String
  final public var debugDescription: Swift.String {
    get
  }
  public init(pan: Swift.String, month: Swift.String, year: Swift.String, cvv: Swift.String, email: Swift.String, cardHolderName: Swift.String)
  @objc deinit
}
final public class Product : Swift.CustomDebugStringConvertible {
  final public let machineProductId: Swift.Int64
  final public let id: Swift.Int64
  final public let name: Swift.String?
  final public let department: Swift.String?
  final public let cashPrice: Swift.Double?
  final public let cardPrice: Swift.Double?
  final public let exPrepaidPrice: Swift.Double?
  final public let machinePrice: Swift.Double?
  final public let preapidPrice: Swift.Int?
  final public let commissionValue: Swift.Double?
  final public let paCode: Swift.String?
  final public let opButtonCode: Swift.String?
  final public let opRowCode: Swift.Int?
  final public let opColCode: Swift.Int?
  final public let imageUrl: Swift.String?
  final public let ageVerification: Swift.Int64?
  final public let memberType: Swift.Bool
  final public let image: Swift.String?
  final public let codeInMap: Swift.Int64?
  final public let missingProduct: Swift.Int?
  final public let vendOut: Swift.Bool
  final public let retailPrice: Swift.Double?
  final public let par: Swift.Int?
  final public let missingStockByMdb: Swift.Int?
  final public let mdbMissingStockLastUpdated: Foundation.Date?
  final public let dexMissingStockLastUpdated: Foundation.Date?
  final public let lastSaleDt: Foundation.Date?
  final public let lastSaleMdbDt: Foundation.Date?
  final public let slowMover: Swift.Bool?
  final public var debugDescription: Swift.String {
    get
  }
  public init(machineProductId: Swift.Int64, id: Swift.Int64, name: Swift.String?, department: Swift.String?, cashPrice: Swift.Double?, cardPrice: Swift.Double?, exPrepaidPrice: Swift.Double?, machinePrice: Swift.Double?, preapidPrice: Swift.Int?, commissionValue: Swift.Double?, paCode: Swift.String?, opButtonCode: Swift.String?, opRowCode: Swift.Int?, opColCode: Swift.Int?, imageUrl: Swift.String?, ageVerification: Swift.Int64?, memberType: Swift.Bool, image: Swift.String?, codeInMap: Swift.Int64?, missingProduct: Swift.Int?, vendOut: Swift.Bool, retailPrice: Swift.Double?, par: Swift.Int?, missingStockByMdb: Swift.Int?, mdbMissingStockLastUpdated: Foundation.Date?, dexMissingStockLastUpdated: Foundation.Date?, lastSaleDt: Foundation.Date?, lastSaleMdbDt: Foundation.Date?, slowMover: Swift.Bool?)
  @objc deinit
}
public class PaymentMethod : Swift.CustomDebugStringConvertible {
  public enum PaymentType : Swift.Int {
    case UNKNOWN, MONYX, CREDIT_CARD, PAYPAL, PREPAID
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  final public let id: Swift.String
  final public let number: Swift.String
  final public let type: libMonyx.PaymentMethod.PaymentType
  public var debugDescription: Swift.String {
    get
  }
  public init(id: Swift.String, number: Swift.String, type: libMonyx.PaymentMethod.PaymentType)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ServiceObject : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public func release(_ creator_: Swift.AnyObject)
  @objc deinit
}
final public class MonyxResult : Swift.CustomDebugStringConvertible {
  public enum ResultType {
    case UNKNOWN, SUCCESS, FAILURE, NETWORK_FAILED, ACCESS_DENIED, SDK_NOT_READY, SERVER_ERROR, BAD_INPUT, BUSY, NOT_LOGGED_IN, TIMEOUT
    public static func == (a: libMonyx.MonyxResult.ResultType, b: libMonyx.MonyxResult.ResultType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let type: libMonyx.MonyxResult.ResultType
  final public let message: Swift.String?
  final public var debugDescription: Swift.String {
    get
  }
  public init(type: libMonyx.MonyxResult.ResultType, message: Swift.String? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ThreadsManager {
  public static func isMainThread() -> Swift.Bool
  public static func getCurrentThread() -> Foundation.Thread
  public static func runOnMainThread(_ task_: @escaping () -> ())
  public static func startSyncTask(_ task_: @escaping () -> ())
  public static func startAsyncTask(_ task_: @escaping () -> ())
  public static func synchronized(_ lock_: Any, _ task_: () -> ())
  @objc deinit
}
public struct TDSPaymentCard : Swift.Encodable {
  public init(number: Swift.String, month: Swift.Int, year: Swift.Int, securityCode: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
}
final public class Image : Swift.CustomDebugStringConvertible {
  final public let file: Swift.String
  final public let width: Swift.Int
  final public let height: Swift.Int
  final public let wasUploaded: Swift.Bool
  final public let dpi: Swift.Int
  final public let iOS: Swift.Bool
  final public var debugDescription: Swift.String {
    get
  }
  public init(file: Swift.String, width: Swift.Int, height: Swift.Int, wasUploaded: Swift.Bool, dpi: Swift.Int, iOS: Swift.Bool)
  @objc deinit
}
@objc final public class Monyx : libMonyx.ServiceObject {
  public enum EnvironmentType : Swift.Int {
    case TEST, TESTS, PROD
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public init(delegate: libMonyx.MonyxDelegate, apiKey: Swift.String, environment: libMonyx.Monyx.EnvironmentType)
  final public func getVersion() -> Swift.String?
  final public func getBuild() -> Swift.String?
  final public func isLoggedIn()
  final public func login(countryCode: Swift.String, phoneNumber: Swift.String)
  final public func verify(otp: Swift.String, country: Swift.String, countryCode: Swift.String, phoneNumber: Swift.String)
  final public func logout()
  final public func getPaymentMethods()
  final public func getMachines(filter: libMonyx.MachineFilter? = nil)
  final public func getMachineProducts(_ id: Swift.Int64)
  final public func getTransactions(filter: libMonyx.TransactionFilter? = nil)
  final public func getOrder(orderId: Swift.String)
  final public func placeOrder(monyxId: Swift.Int64, paymentMethod: libMonyx.PaymentMethod, amount: Swift.Int64, products: [libMonyx.RemoteVendProduct]?)
  final public func addCreditCard(card: libMonyx.Card)
  final public func addCreditCardTDSecure(paymentCard: libMonyx.TDSPaymentCard, cardHolder: libMonyx.TDSCardHolder)
  final public func removeCard(id: Swift.String)
  final public func deposit(depositCard: libMonyx.DepositCard, amount: Swift.Double, chargedCardId: Swift.String)
  override final public func release(_ creator_: Swift.AnyObject)
  @objc deinit
}
final public class PrepaidCard : libMonyx.DepositCard {
  final public let isActive: Swift.Bool
  final public let created: Foundation.Date
  final public let isMoney: Swift.Bool
  override final public var debugDescription: Swift.String {
    get
  }
  public init(id: Swift.String, number: Swift.String, type: libMonyx.PaymentMethod.PaymentType, balance: Swift.Int64, isActive: Swift.Bool, created: Foundation.Date, currency: Swift.String, currencyDecimalDigits: Swift.Int, isMoney: Swift.Bool)
  @objc deinit
}
public class TDSGetCardBaseResponse : Swift.Decodable {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public enum TDSGetCardResponseFactory : Swift.Decodable {
  case UNKNOWN
  case LOCATOR(libMonyx.TDSGetCardLocatorResponse)
  case CHALLENGE_REQUIRED(libMonyx.TDSGetCardChallengeResponse)
  case ERROR(libMonyx.TDSGetCardErrorResponse)
  public init(from decoder: Swift.Decoder) throws
}
final public class Machine : Swift.CustomDebugStringConvertible {
  public enum MachineType : Swift.Int {
    case HOT_DRINKS, COLD_DRINKS, SNACKS, ICE_CREAM, MILK_PRODUCTS, SANDWICHES, FOOD, AMUSEMENT, ALCOHOL, CIGARETTES, COMBO, AIR, ELECTRICITY, OTHER, RECYCLING, WATER_FILLING_STATION, CAR_WASH_MACHINE, LAUNDRY_MACHINE, CELLULAR_ACCESSORIES, PHARMACY, TV_AND_INTERNET_SERVICES, PPE, MASSAGE_CHAIRS, ICE, PHOTO_BOOTH, PICTURES, PHOTOCOPIES, FLOWERS, CAR_VACUUM_CLEANER, WEIGHT, LOCKERS, ACCESS_CONTROL, GOLF_BALL_DISPENSER, DOG_WASH, FRESH_JUICE, GAMING, MICRO_MARKETS
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  final public let id: Swift.Int64
  final public let monyxId: Swift.Int64
  final public let operatorName: Swift.String?
  final public let isWalletAllowed: Swift.Bool
  final public let latitude: Swift.Double
  final public let longitude: Swift.Double
  final public let type: libMonyx.Machine.MachineType
  final public let campaigns: [libMonyx.Campaign]
  final public let name: Swift.String?
  final public let country: Swift.String?
  final public let city: Swift.String?
  final public let hwSerial: Swift.String?
  final public let supportRemoteVend: Swift.Bool
  final public let multiVendCount: Swift.Int64
  final public let machineStatus: Swift.Bool
  final public var debugDescription: Swift.String {
    get
  }
  public init(id: Swift.Int64, monyxId: Swift.Int64, operatorName: Swift.String?, isWalletAllowed: Swift.Bool, latitude: Swift.Double, longitude: Swift.Double, type: libMonyx.Machine.MachineType, campaigns: [libMonyx.Campaign], name: Swift.String?, country: Swift.String?, city: Swift.String?, hwSerial: Swift.String?, supportRemoteVend: Swift.Bool, multiVendCount: Swift.Int64, machineStatus: Swift.Bool)
  @objc deinit
}
public class TDSAddCardBaseResponse : Swift.Decodable {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public enum TDSAddCardResponseFactory : Swift.Decodable {
  case UNKNOWN
  case FRICTIONLESS(libMonyx.TDSAddCardFrictionlessResponse)
  case FINGERPRINT(libMonyx.TDSAddCardFingerprintResponse)
  case CHALLENGE(libMonyx.TDSAddCardChallengeResponse)
  case ERROR(libMonyx.TDSAddCardErrorResponse)
  public init(from decoder: Swift.Decoder) throws
}
final public class TransactionFilter : Swift.CustomDebugStringConvertible {
  final public let machineId: Swift.Int64?
  final public let paymentMethodId: Swift.String?
  final public let paymentType: libMonyx.PaymentMethod.PaymentType?
  final public let limit: Swift.Int?
  final public let transactionsBefore: Foundation.Date?
  final public var debugDescription: Swift.String {
    get
  }
  public init(machineId: Swift.Int64? = nil, paymentMethodId: Swift.String? = nil, paymentType: libMonyx.PaymentMethod.PaymentType? = nil, limit: Swift.Int? = nil, transactionsBefore: Foundation.Date? = nil)
  @objc deinit
}
final public class CreditCard : libMonyx.PaymentMethod {
  final public let brand: Swift.String
  override final public var debugDescription: Swift.String {
    get
  }
  public init(id: Swift.String, number: Swift.String, type: libMonyx.PaymentMethod.PaymentType, brand: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers public class TDSAddCardFrictionlessResponse : libMonyx.TDSAddCardBaseResponse {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers public class TDSAddCardFingerprintResponse : libMonyx.TDSAddCardBaseResponse {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public class DepositCard : libMonyx.PaymentMethod {
  final public let balance: Swift.Int64
  final public let currency: Swift.String
  final public let currencyDecimalDigits: Swift.Int
  override public var debugDescription: Swift.String {
    get
  }
  public init(id: Swift.String, number: Swift.String, type: libMonyx.PaymentMethod.PaymentType, balance: Swift.Int64, currency: Swift.String, currencyDecimalDigits: Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers public class TDSGetCardChallengeResponse : libMonyx.TDSGetCardBaseResponse {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class LookAndFeel : Swift.CustomDebugStringConvertible {
  final public let imageUrl: Swift.String
  final public let backgroudColor: Swift.String
  final public let textColor: Swift.String
  final public let receiptText: Swift.String
  final public let punchCardText: Swift.String
  final public let images: [libMonyx.Image]
  final public var debugDescription: Swift.String {
    get
  }
  public init(imageUrl: Swift.String, backgroudColor: Swift.String, textColor: Swift.String, receiptText: Swift.String, punchCardText: Swift.String, images: [libMonyx.Image])
  @objc deinit
}
public protocol MonyxDelegate : AnyObject {
  func onCheckIsUserLogin(result: libMonyx.MonyxResult)
  func onLogin(result: libMonyx.MonyxResult)
  func onVerify(result: libMonyx.MonyxResult)
  func onLogout(result: libMonyx.MonyxResult)
  func onGetPaymentMethods(result: libMonyx.MonyxResult, paymentMethods: [libMonyx.PaymentMethod]?)
  func onGetMachines(result: libMonyx.MonyxResult, machines: [libMonyx.Machine]?)
  func onGetMachineProducts(result: libMonyx.MonyxResult, products: [libMonyx.Product]?)
  func onPlaceOrder(result: libMonyx.MonyxResult, order: libMonyx.Order?)
  func onDeposit(result: libMonyx.MonyxResult, balance: Swift.Int64?)
  func onGetOrder(result: libMonyx.MonyxResult, order: libMonyx.Order?)
  func onGetTransactions(result: libMonyx.MonyxResult, transactions: [libMonyx.Order]?)
  func onAddCreditCard(result: libMonyx.MonyxResult, card: libMonyx.CreditCard?)
  func onRemoveCard(result: libMonyx.MonyxResult)
}
final public class RemoteVendProduct : Swift.CustomDebugStringConvertible {
  final public let codeInMap: Swift.Int64
  final public let quantity: Swift.Int
  final public let pulseLineNumber: Swift.Int
  final public var debugDescription: Swift.String {
    get
  }
  public init(codeInMap: Swift.Int64, quantity: Swift.Int, pulseLineNumber: Swift.Int)
  @objc deinit
}
final public class Order : Swift.CustomDebugStringConvertible {
  public enum Status : Swift.Int {
    case UNKNOWN, COMPLETED, CREATED, AUTHORIZED, CANCELED, FREE_TRANSACTION, TIMEOUT, INCOMPLETE
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  final public let id: Swift.String
  final public let type: Swift.String
  final public let status: libMonyx.Order.Status
  final public let paymentSource: Swift.String
  final public let amount: Swift.Int64
  final public let date: Foundation.Date
  final public let currency: Swift.String?
  final public let itemsCount: Swift.Int
  final public let endingBalance: Swift.Int64
  final public var debugDescription: Swift.String {
    get
  }
  public init(id: Swift.String, type: Swift.String, status: libMonyx.Order.Status, paymentSource: Swift.String, amount: Swift.Int64, date: Foundation.Date, currency: Swift.String?, itemsCount: Swift.Int, endingBalance: Swift.Int64)
  @objc deinit
}
@_inheritsConvenienceInitializers public class TDSAddCardErrorResponse : libMonyx.TDSAddCardBaseResponse {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class Event<T> where T : AnyObject {
  final public class Observer : Swift.Hashable {
    final public func hash(into hasher: inout Swift.Hasher)
    public init(_ owner_: Swift.AnyObject, _ action_: @escaping (T) -> ())
    @objc deinit
    final public var hashValue: Swift.Int {
      get
    }
  }
  final public var count: Swift.Int {
    get
  }
  public init(_ sender_: T)
  final public func attach(_ observer_: libMonyx.Event<T>.Observer)
  final public func attachOnce(_ observer_: libMonyx.Event<T>.Observer)
  final public func detach(_ observer_: libMonyx.Event<T>.Observer)
  final public func detach(_ owner_: Swift.AnyObject)
  final public func detachAll()
  final public func invokeAll()
  final public func invokeOnMainThread()
  @objc deinit
}
public func == <T>(lhs: libMonyx.Event<T>.Observer, rhs: libMonyx.Event<T>.Observer) -> Swift.Bool where T : AnyObject
extension libMonyx.PaymentMethod.PaymentType : Swift.Equatable {}
extension libMonyx.PaymentMethod.PaymentType : Swift.Hashable {}
extension libMonyx.PaymentMethod.PaymentType : Swift.RawRepresentable {}
extension libMonyx.MonyxResult.ResultType : Swift.Equatable {}
extension libMonyx.MonyxResult.ResultType : Swift.Hashable {}
extension libMonyx.Monyx.EnvironmentType : Swift.Equatable {}
extension libMonyx.Monyx.EnvironmentType : Swift.Hashable {}
extension libMonyx.Monyx.EnvironmentType : Swift.RawRepresentable {}
extension libMonyx.Machine.MachineType : Swift.Equatable {}
extension libMonyx.Machine.MachineType : Swift.Hashable {}
extension libMonyx.Machine.MachineType : Swift.RawRepresentable {}
extension libMonyx.Order.Status : Swift.Equatable {}
extension libMonyx.Order.Status : Swift.Hashable {}
extension libMonyx.Order.Status : Swift.RawRepresentable {}
